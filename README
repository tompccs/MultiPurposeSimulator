I've approached this final exercise in a way that makes it virtually impossible to submit my work via 
Blackboard. The solutions to each problem can be run by changing the command line arguments. Available 
options can be read by running the program with --help.

The program is made up of 3 .c files (each with its own header .h file):
>> main.c
	'--	Point of entry. Sets up simulations according to arguments and contains help text.
>> lib.c
	'--	A general purpouse library for solving differential equations. In theory, any method
		for solving DEs can be implemented by writing a function and passing a function pointer to
		iterate_to_file(). 4th order Runge-Kutta is implemented in this way. It also contains some
		helper functions for parsing command line arguments.
>> rk_functions.c
	'-- For each type of simulation, there are two functions. One is passed into iterate_to_file(),
		and in turn calls its corresponding set of functions, typically one for each variable in the
		system of differential equations. In theory, these functions can be used in solving their
		system of equations by other methods, such as Gauss' or higher-order RK.

There is also a python script for visualising the data. It reads from the standard input and takes
two arguments. Argument 1 is the scale factor (expressed as a number of distance units per screen pixel)
and argument 2 is a file to output the data to exactly as it is read from the standard input. You may 
also specify --noflush to read in a simulation (perhaps from an existing file) before drawing it.

== TO COMPILE ==

gcc ./lib.h ./rk_functions.h ./main.h ./lib.c ./rk_functions.c ./main.c -o ./simulator

== EXAMPLE COMMANDS ==

./simulator ./out.csv --simple --orbit --2D 0 1E7 0 2E3 0 1E26 1E6 1
	'--	Simulates a simple 2D orbit with one body orbiting another static body and writes the result to 
	./out.csv

./simulator --stdout --simple --orbit --2D 0 1E7 0 2E3 0 1E26 1E6 1 | ./visual.py 1E7 ./out.csv
	'--	Simulates a simple orbit 2D with one body orbiting another static body, visualises it and writes
	 	the result to ./out.csv

./simulator --stdout --orbit --free --2D starttime: 0s earth: 0 0 0 0 6E24 moon: 384.4E6 0 0 1E3 7.3E22 probe: 7E6 0 10.35E3 2.75E3 20E3kg timelim: 1E9s step: 10s | ./visual.py 1E9 ./out.csv
	'-- Simulates 3 bodies in 2D corresponding to the given initial conditions. Note that the annotations
		(such as 'starttime:', 'earth:', 'moon:', 'timelim:' and 'step:') around the numerical arguments
		are not required and will be ignored by the program (bodies are indexed numerically in the output)
		but they are useful for keeping track of which variable is which. The result is visualised and 
		written to ./out.csv 

